import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters
import database
import scheduler
import config
from datetime import datetime, timedelta

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –£—Å–ª—É–≥–∏ –∏ –∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
SERVICES = {
    "–û–±—â–∏–π –º–∞—Å—Å–∞–∂ ‚Äî 60 –º–∏–Ω (2000—Ä)": 60,
    "–ú–∞—Å—Å–∞–∂ –≥–æ–ª–æ–≤—ã ‚Äî 30 –º–∏–Ω (1000—Ä)": 30,
    "–®–µ–π–Ω–æ-–≤–æ—Ä–æ—Ç–Ω–∏–∫–æ–≤–∞—è –∑–æ–Ω–∞ ‚Äî 45 –º–∏–Ω (1000—Ä)": 45,
    "–ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π –º–∞—Å—Å–∞–∂ ‚Äî 2—á (5000—Ä)": 120
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
def get_available_days():
    days = []
    today = datetime.today()
    for i in range(7):
        day = today + timedelta(days=i)
        if day.strftime("%a").lower() in config.WORKING_HOURS['weekdays']:
            days.append(day.strftime("%Y-%m-%d"))
    return days

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    utm_source = context.args[0] if context.args else "organic"

    reply_keyboard = [['–ó–ê–ü–ò–°–ê–¢–¨–°–Ø']]
    markup = ReplyKeyboardMarkup([KeyboardButton(text) for text in reply_keyboard], one_time_keyboard=False)
    
    update.message.reply_text(
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –º–∞—Å—Å–∞–∂–∏—Å—Ç–∞ –ï–ª–µ–Ω—ã –ö—Ä—ã–ª–æ–≤–æ–π! –ü—Ä–∏–≥–ª–∞—à–∞—é –í–∞—Å –ø–æ—Å–µ—Ç–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∏–¥–æ–≤ –º–∞—Å—Å–∞–∂–∞!',
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
def handle_signup(update: Update, context: CallbackContext) -> None:
    buttons = [[KeyboardButton(service)] for service in SERVICES.keys()]
    buttons.append([KeyboardButton("–ù–∞–∑–∞–¥")])
    markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=False)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Å—Å–∞–∂–∞:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
def handle_service_choice(update: Update, context: CallbackContext) -> None:
    selected_service = update.message.text
    if selected_service not in SERVICES:
        return

    context.user_data['service'] = selected_service
    days = get_available_days()

    buttons = []
    for day in days:
        date_obj = datetime.strptime(day, "%Y-%m-%d")
        day_name = date_obj.strftime("%A")
        full_day_name = {
            "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "Wednesday": "–°—Ä–µ–¥–∞",
            "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
            "Saturday": "–°—É–±–±–æ—Ç–∞"
        }.get(day_name, day_name)

        appointments = database.get_appointments_by_date(day)
        occupied = [time for _, time in appointments]
        duration = SERVICES[selected_service]

        total_minutes = (config.WORKING_HOURS['end'] - config.WORKING_HOURS['start']) * 60
        slots = []

        current_time = datetime.strptime(f"{day} {config.WORKING_HOURS['start']:02}:00", "%Y-%m-%d %H:%M")
        end_time = datetime.strptime(f"{day} {config.WORKING_HOURS['end']:02}:00", "%Y-%m-%d %H:%M")

        while current_time + timedelta(minutes=duration) <= end_time:
            slot_time = current_time.strftime("%H:%M")
            next_slot = current_time + timedelta(minutes=duration + config.BREAK_AFTER_SERVICE)
            if all(slot_time != occ[1] for occ in appointments):
                slots.append(slot_time)
            current_time = next_slot

        status = "–∑–∞–Ω—è—Ç–æ" if not slots else f"–µ—Å—Ç—å —Å–ª–æ—Ç—ã: {', '.join(slots)}"
        buttons.append([KeyboardButton(f"{full_day_name} ({status})")])

    buttons.append([KeyboardButton("–ù–∞–∑–∞–¥")])
    markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=False)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è
def handle_day_choice(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    day_match = text.split(" ")[0].lower()
    days_map = {
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "mon",
        "–≤—Ç–æ—Ä–Ω–∏–∫": "tue",
        "—Å—Ä–µ–¥–∞": "wed",
        "—á–µ—Ç–≤–µ—Ä–≥": "thu",
        "–ø—è—Ç–Ω–∏—Ü–∞": "fri",
        "—Å—É–±–±–æ—Ç–∞": "sat"
    }

    if day_match not in days_map.values():
        return

    selected_date = None
    today = datetime.today()
    for i in range(7):
        check_day = today + timedelta(days=i)
        if check_day.strftime("%a").lower() == day_match:
            selected_date = check_day.strftime("%Y-%m-%d")
            break

    if not selected_date:
        update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    context.user_data['date'] = selected_date
    selected_service = context.user_data.get('service')

    if not selected_service:
        return

    duration = SERVICES[selected_service]
    appointments = database.get_appointments_by_date(selected_date)

    current_time = datetime.strptime(f"{selected_date} {config.WORKING_HOURS['start']:02}:00", "%Y-%m-%d %H:%M")
    end_time = datetime.strptime(f"{selected_date} {config.WORKING_HOURS['end']:02}:00", "%Y-%m-%d %H:%M")

    buttons = []
    while current_time + timedelta(minutes=duration) <= end_time:
        slot_time = current_time.strftime("%H:%M")
        next_slot = current_time + timedelta(minutes=duration + config.BREAK_AFTER_SERVICE)
        if all(slot_time != occ[1] for occ in appointments):
            buttons.append([KeyboardButton(slot_time)])
        current_time = next_slot

    buttons.append([KeyboardButton("–ù–∞–∑–∞–¥")])
    markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=False)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
def handle_time_choice(update: Update, context: CallbackContext) -> None:
    time_str = update.message.text
    try:
        datetime.strptime(time_str, "%H:%M")
    except ValueError:
        return

    user = update.effective_user
    service = context.user_data.get("service")
    date = context.user_data.get("date")

    if not service or not date:
        return

    database.add_appointment(user.id, user.full_name, service, date, time_str, "manual")

    full_datetime = f"{date} {time_str}"
    scheduler.schedule_notifications(full_datetime, user.id, service)

    bot.send_message(
        chat_id=user.id,
        text=f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å:\n\n–£—Å–ª—É–≥–∞: {service}\n–î–∞—Ç–∞: {date}, {time_str}\n\n‚ùó –ß–µ—Ä–µ–∑ 1 —á–∞—Å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
    )

    bot.send_message(
        chat_id=user.id,
        text=f"‚úÖ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª: {config.CHANNEL_USERNAME}\n–¢–∞–º –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Å–∞–∂–µ –∏ –Ω–æ–≤—ã—Ö —É—Å–ª—É–≥–∞—Ö!"
    )

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
def admin_panel(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    if user_id not in config.ADMIN_IDS:
        update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    buttons = [
        [KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏")],
        [KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ UTM")],
        [KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=False)
    update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
def handle_admin_action(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    user_id = update.effective_user.id

    if user_id not in config.ADMIN_IDS:
        return

    if text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏":
        records = database.get_all_appointments()
        if not records:
            update.message.reply_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
            return

        for user_id, name, service, date, time in records:
            update.message.reply_text(f"üßë‚Äçü¶∞ –ò–º—è: {name}\nüïí –î–∞—Ç–∞: {date}, {time}\nüíÜ –£—Å–ª—É–≥–∞: {service}")

    elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ UTM":
        stats = database.get_stats()
        msg = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n"
        for source, count in stats:
            msg += f"- {source}: {count}\n"
        update.message.reply_text(msg)

    elif text == "–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏":
        database.clear_old_appointments()
        update.message.reply_text("‚úÖ –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    database.init_db()
    scheduler.start_scheduler()

    updater = Updater(config.BOT_TOKEN)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("admin", admin_panel))
    dispatcher.add_handler(MessageHandler(Filters.regex("–ó–ê–ü–ò–°–ê–¢–¨–°–Ø"), handle_signup))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, lambda u, c: {
        "service": handle_service_choice,
        "date": handle_day_choice,
        "time": handle_time_choice,
        "admin": handle_admin_action
    }.get(next(iter(c.user_data.keys()), None), lambda u, c: None)(u, c)))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
